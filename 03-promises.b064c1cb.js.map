{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAaF,SAASC,cAAc,yBACpCE,EAAYH,SAASC,cAAc,wBACnCG,EAAcJ,SAASC,cAAc,0BA8B3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCPQ,QAAQC,IAAIjB,GACZgB,QAAQC,IAAId,GACZa,QAAQC,IAAIb,GACZY,QAAQC,IAAIZ,GAEZL,EAAKkB,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAIC,EAAQC,OAAOnB,EAAWoB,OACxBC,EAAOF,OAAOlB,EAAUmB,OACxBE,EAASH,OAAOjB,EAAYkB,OAElCP,QAAQC,IAAII,GACZL,QAAQC,IAAIO,GACZR,QAAQC,IAAIQ,GAEZ,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCpB,EAAcoB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,M,OAAYqB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAClGyB,OAAI,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,M,OAAYqB,EAAA/B,GAASgC,OAAOI,QAAQ,sBAAqCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IACrGa,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst delayInput = document.querySelector('input[name = \"delay\"]');\nconst stepInput = document.querySelector('input[name = \"step\"]');\nconst amountInput = document.querySelector('input[name = \"amount\"]');\n\nconsole.log(form);\nconsole.log(delayInput);\nconsole.log(stepInput);\nconsole.log(amountInput);\n\nform.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  console.log(delay);\n  console.log(step);\n  console.log(amount);\n  \n  for (let i = 1; i <= amount; i += 1){\n    createPromise(i, delay)\n      .then(({ position, delay }) => Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      .catch(({ position, delay }) => Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n    delay += step;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay)\n})\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b064c1cb.js.map"}